// ConsoleApplication2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

#include <iostream>
#include<conio.h>
#include <sstream>
#include<stdio.h>
#include<stdlib.h>
#include <queue>
#include <unordered_set>

using namespace std;


#define sum 9
#define n 6

// Refer for Truth Table : https://algorithms.tutorialhorizon.com/dynamic-programming-subset-sum-problem/ - Summa
//https://stackoverflow.com/questions/4355955/subset-sum-algorithm -- For explanation
//https://www.youtube.com/watch?v=s6FhG--P7z0 - For truth table
bool isSubsetSum(int set[])
{
	bool subset[n + 1][sum + 1];

	// If sum is 0, then answer is true 
	for (int i = 0; i <= n; i++)
		subset[i][0] = true;

	// If sum is not 0 and set is empty, then answer is false 
	for (int i = 1; i <= sum; i++)
		subset[0][i] = false;

	// Fill the subset table in botton up manner 
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= sum; j++)
		{
			if (j<set[i - 1])
				subset[i][j] = subset[i - 1][j];// If number of skips go back is higher than number of columns available
			if (j >= set[i - 1])
				subset[i][j] = subset[i - 1][j] ||
				subset[i - 1][j - set[i - 1]];
		}
	}

	/*   // uncomment this code to print table
	for (int i = 0; i <= n; i++)
	{
	for (int j = 0; j <= sum; j++)
	printf ("%4d", subset[i][j]);
	printf("\n");
	}*/

	return subset[n][sum];
}

int main()
{
	int set[] = { 3, 34, 4, 12, 5, 2 };

	if (isSubsetSum(set) == true)
		printf("Found a subset with given sum");
	else
		printf("No subset with given sum");
	return 0;
}
